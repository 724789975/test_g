// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums/type.proto

package com.pearl.fcw.proto.enums;

/**
 * <pre>
 *在线奖励类型(对应sys_online_award的type字段)
 * </pre>
 *
 * Protobuf enum {@code fcw.proto.enums.type.EOnlineAwardType}
 */
public enum EOnlineAwardType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>ONLINE_NONE = 0;</code>
   */
  ONLINE_NONE(0),
  /**
   * <pre>
   *在线时长，页游废弃
   * </pre>
   *
   * <code>ONLINE_TIME = 1;</code>
   */
  ONLINE_TIME(1),
  /**
   * <pre>
   *每日签到
   * </pre>
   *
   * <code>DAILY_CHECK = 2;</code>
   */
  DAILY_CHECK(2),
  /**
   * <pre>
   *神秘锦囊
   * </pre>
   *
   * <code>MYSTIC_BAG = 3;</code>
   */
  MYSTIC_BAG(3),
  /**
   * <pre>
   *VIP保险箱
   * </pre>
   *
   * <code>VIP_SAFECABINET = 4;</code>
   */
  VIP_SAFECABINET(4),
  /**
   * <pre>
   *密码箱
   * </pre>
   *
   * <code>PASSWARD_BOX = 5;</code>
   */
  PASSWARD_BOX(5),
  /**
   * <pre>
   *结算翻牌（原端游类型，页游废弃）
   * </pre>
   *
   * <code>STAGE_CLEAR = 6;</code>
   */
  STAGE_CLEAR(6),
  /**
   * <pre>
   *靶场
   * </pre>
   *
   * <code>SHOOTING_AWARD = 7;</code>
   */
  SHOOTING_AWARD(7),
  /**
   * <pre>
   *连续射击（银）
   * </pre>
   *
   * <code>SILVER_DARTLE_AWARD = 8;</code>
   */
  SILVER_DARTLE_AWARD(8),
  /**
   * <pre>
   *连续射击（金）
   * </pre>
   *
   * <code>GOLD_DARTLE_AWARD = 9;</code>
   */
  GOLD_DARTLE_AWARD(9),
  /**
   * <pre>
   *彩盒
   * </pre>
   *
   * <code>LUCK_PACKAGE = 10;</code>
   */
  LUCK_PACKAGE(10),
  /**
   * <pre>
   *拼图
   * </pre>
   *
   * <code>MISTIC_PINTU = 11;</code>
   */
  MISTIC_PINTU(11),
  /**
   * <pre>
   *资源争夺战兑换礼盒
   * </pre>
   *
   * <code>RES_MAGIC_BOX = 12;</code>
   */
  RES_MAGIC_BOX(12),
  /**
   * <pre>
   *圣诞跳跳乐箱子
   * </pre>
   *
   * <code>AGRAVITYBOXITEM = 13;</code>
   */
  AGRAVITYBOXITEM(13),
  /**
   * <pre>
   *暑假礼包
   * </pre>
   *
   * <code>ONE_TO_MANY_BOX = 15;</code>
   */
  ONE_TO_MANY_BOX(15),
  /**
   * <pre>
   *根据指定的serverId决定结算翻牌的底牌
   * </pre>
   *
   * <code>STAGE_CLEAR_BY_SERVER_ID = 100;</code>
   */
  STAGE_CLEAR_BY_SERVER_ID(100),
  /**
   * <pre>
   *根据当天已翻牌次数的下限阈值决定结算翻牌的底牌(左闭区间)
   * </pre>
   *
   * <code>STAGE_CLEAR_BY_MIN_BRAND_COUNT = 101;</code>
   */
  STAGE_CLEAR_BY_MIN_BRAND_COUNT(101),
  /**
   * <pre>
   *根据当天已翻牌次数的上限阈值决定结算翻牌的底牌(右闭区间)
   * </pre>
   *
   * <code>STAGE_CLEAR_BY_MAX_BRAND_COUNT = 102;</code>
   */
  STAGE_CLEAR_BY_MAX_BRAND_COUNT(102),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>ONLINE_NONE = 0;</code>
   */
  public static final int ONLINE_NONE_VALUE = 0;
  /**
   * <pre>
   *在线时长，页游废弃
   * </pre>
   *
   * <code>ONLINE_TIME = 1;</code>
   */
  public static final int ONLINE_TIME_VALUE = 1;
  /**
   * <pre>
   *每日签到
   * </pre>
   *
   * <code>DAILY_CHECK = 2;</code>
   */
  public static final int DAILY_CHECK_VALUE = 2;
  /**
   * <pre>
   *神秘锦囊
   * </pre>
   *
   * <code>MYSTIC_BAG = 3;</code>
   */
  public static final int MYSTIC_BAG_VALUE = 3;
  /**
   * <pre>
   *VIP保险箱
   * </pre>
   *
   * <code>VIP_SAFECABINET = 4;</code>
   */
  public static final int VIP_SAFECABINET_VALUE = 4;
  /**
   * <pre>
   *密码箱
   * </pre>
   *
   * <code>PASSWARD_BOX = 5;</code>
   */
  public static final int PASSWARD_BOX_VALUE = 5;
  /**
   * <pre>
   *结算翻牌（原端游类型，页游废弃）
   * </pre>
   *
   * <code>STAGE_CLEAR = 6;</code>
   */
  public static final int STAGE_CLEAR_VALUE = 6;
  /**
   * <pre>
   *靶场
   * </pre>
   *
   * <code>SHOOTING_AWARD = 7;</code>
   */
  public static final int SHOOTING_AWARD_VALUE = 7;
  /**
   * <pre>
   *连续射击（银）
   * </pre>
   *
   * <code>SILVER_DARTLE_AWARD = 8;</code>
   */
  public static final int SILVER_DARTLE_AWARD_VALUE = 8;
  /**
   * <pre>
   *连续射击（金）
   * </pre>
   *
   * <code>GOLD_DARTLE_AWARD = 9;</code>
   */
  public static final int GOLD_DARTLE_AWARD_VALUE = 9;
  /**
   * <pre>
   *彩盒
   * </pre>
   *
   * <code>LUCK_PACKAGE = 10;</code>
   */
  public static final int LUCK_PACKAGE_VALUE = 10;
  /**
   * <pre>
   *拼图
   * </pre>
   *
   * <code>MISTIC_PINTU = 11;</code>
   */
  public static final int MISTIC_PINTU_VALUE = 11;
  /**
   * <pre>
   *资源争夺战兑换礼盒
   * </pre>
   *
   * <code>RES_MAGIC_BOX = 12;</code>
   */
  public static final int RES_MAGIC_BOX_VALUE = 12;
  /**
   * <pre>
   *圣诞跳跳乐箱子
   * </pre>
   *
   * <code>AGRAVITYBOXITEM = 13;</code>
   */
  public static final int AGRAVITYBOXITEM_VALUE = 13;
  /**
   * <pre>
   *暑假礼包
   * </pre>
   *
   * <code>ONE_TO_MANY_BOX = 15;</code>
   */
  public static final int ONE_TO_MANY_BOX_VALUE = 15;
  /**
   * <pre>
   *根据指定的serverId决定结算翻牌的底牌
   * </pre>
   *
   * <code>STAGE_CLEAR_BY_SERVER_ID = 100;</code>
   */
  public static final int STAGE_CLEAR_BY_SERVER_ID_VALUE = 100;
  /**
   * <pre>
   *根据当天已翻牌次数的下限阈值决定结算翻牌的底牌(左闭区间)
   * </pre>
   *
   * <code>STAGE_CLEAR_BY_MIN_BRAND_COUNT = 101;</code>
   */
  public static final int STAGE_CLEAR_BY_MIN_BRAND_COUNT_VALUE = 101;
  /**
   * <pre>
   *根据当天已翻牌次数的上限阈值决定结算翻牌的底牌(右闭区间)
   * </pre>
   *
   * <code>STAGE_CLEAR_BY_MAX_BRAND_COUNT = 102;</code>
   */
  public static final int STAGE_CLEAR_BY_MAX_BRAND_COUNT_VALUE = 102;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EOnlineAwardType valueOf(int value) {
    return forNumber(value);
  }

  public static EOnlineAwardType forNumber(int value) {
    switch (value) {
      case 0: return ONLINE_NONE;
      case 1: return ONLINE_TIME;
      case 2: return DAILY_CHECK;
      case 3: return MYSTIC_BAG;
      case 4: return VIP_SAFECABINET;
      case 5: return PASSWARD_BOX;
      case 6: return STAGE_CLEAR;
      case 7: return SHOOTING_AWARD;
      case 8: return SILVER_DARTLE_AWARD;
      case 9: return GOLD_DARTLE_AWARD;
      case 10: return LUCK_PACKAGE;
      case 11: return MISTIC_PINTU;
      case 12: return RES_MAGIC_BOX;
      case 13: return AGRAVITYBOXITEM;
      case 15: return ONE_TO_MANY_BOX;
      case 100: return STAGE_CLEAR_BY_SERVER_ID;
      case 101: return STAGE_CLEAR_BY_MIN_BRAND_COUNT;
      case 102: return STAGE_CLEAR_BY_MAX_BRAND_COUNT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EOnlineAwardType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EOnlineAwardType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EOnlineAwardType>() {
          public EOnlineAwardType findValueByNumber(int number) {
            return EOnlineAwardType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.pearl.fcw.proto.enums.ApiProto.getDescriptor()
        .getEnumTypes().get(31);
  }

  private static final EOnlineAwardType[] VALUES = values();

  public static EOnlineAwardType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EOnlineAwardType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:fcw.proto.enums.type.EOnlineAwardType)
}

