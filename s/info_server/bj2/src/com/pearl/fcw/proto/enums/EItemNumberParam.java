// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums/other.proto

package com.pearl.fcw.proto.enums;

/**
 * <pre>
 *SysItem和PlayerItem中经过计算储存的数值
 * </pre>
 *
 * Protobuf enum {@code fcw.proto.enums.other.EItemNumberParam}
 */
public enum EItemNumberParam
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *道具槽位号
   * </pre>
   *
   * <code>seq = 0;</code>
   */
  seq(0),
  /**
   * <pre>
   *对客户端输出的战斗力
   * </pre>
   *
   * <code>fightNum = 1;</code>
   */
  fightNum(1),
  /**
   * <pre>
   *下一级对客户端输出的战斗力
   * </pre>
   *
   * <code>fightNumNext = 2;</code>
   */
  fightNumNext(2),
  /**
   * <pre>
   *对客户端输出的战斗力（基础）
   * </pre>
   *
   * <code>fightNumBase = 3;</code>
   */
  fightNumBase(3),
  /**
   * <pre>
   *对客户端输出的战斗力（强化增加）
   * </pre>
   *
   * <code>fightNumAdd = 4;</code>
   */
  fightNumAdd(4),
  /**
   * <pre>
   *颜色
   * </pre>
   *
   * <code>color = 10;</code>
   */
  color(10),
  /**
   * <pre>
   *维修花费
   * </pre>
   *
   * <code>repaireCost = 20;</code>
   */
  repaireCost(20),
  /**
   * <pre>
   *武器威力
   * </pre>
   *
   * <code>damage = 100;</code>
   */
  damage(100),
  /**
   * <pre>
   *下一级武器威力
   * </pre>
   *
   * <code>damageNext = 101;</code>
   */
  damageNext(101),
  /**
   * <pre>
   *端游真实的武器威力
   * </pre>
   *
   * <code>damageDb = 102;</code>
   */
  damageDb(102),
  /**
   * <pre>
   *端游真实的下一级武器威力
   * </pre>
   *
   * <code>damageDbNext = 103;</code>
   */
  damageDbNext(103),
  /**
   * <pre>
   *射速
   * </pre>
   *
   * <code>shootSpeed = 110;</code>
   */
  shootSpeed(110),
  /**
   * <pre>
   *下一级射速
   * </pre>
   *
   * <code>shootSpeedNext = 111;</code>
   */
  shootSpeedNext(111),
  /**
   * <pre>
   *端游真实的射速
   * </pre>
   *
   * <code>shootSpeedDb = 112;</code>
   */
  shootSpeedDb(112),
  /**
   * <pre>
   *端游真实的下一级射速
   * </pre>
   *
   * <code>shootSpeedDbNext = 113;</code>
   */
  shootSpeedDbNext(113),
  /**
   * <pre>
   *火抗
   * </pre>
   *
   * <code>cResistanceFire = 140;</code>
   */
  cResistanceFire(140),
  /**
   * <pre>
   *下一级火抗
   * </pre>
   *
   * <code>cResistanceFireNext = 141;</code>
   */
  cResistanceFireNext(141),
  /**
   * <pre>
   *爆抗
   * </pre>
   *
   * <code>cResistanceBlast = 150;</code>
   */
  cResistanceBlast(150),
  /**
   * <pre>
   *下一级爆抗
   * </pre>
   *
   * <code>cResistanceBlastNext = 151;</code>
   */
  cResistanceBlastNext(151),
  /**
   * <pre>
   *弹抗
   * </pre>
   *
   * <code>cResistanceBullet = 160;</code>
   */
  cResistanceBullet(160),
  /**
   * <pre>
   *下一级弹抗
   * </pre>
   *
   * <code>cResistanceBulletNext = 161;</code>
   */
  cResistanceBulletNext(161),
  /**
   * <pre>
   *刀抗
   * </pre>
   *
   * <code>cResistanceKnife = 170;</code>
   */
  cResistanceKnife(170),
  /**
   * <pre>
   *下一级刀抗
   * </pre>
   *
   * <code>cResistanceKnifeNext = 171;</code>
   */
  cResistanceKnifeNext(171),
  /**
   * <pre>
   *加血
   * </pre>
   *
   * <code>cBloodAdd = 180;</code>
   */
  cBloodAdd(180),
  /**
   * <pre>
   *下一级加血
   * </pre>
   *
   * <code>cBloodAddNext = 181;</code>
   */
  cBloodAddNext(181),
  /**
   * <pre>
   *升级需要材料
   * </pre>
   *
   * <code>materialNeed = 190;</code>
   */
  materialNeed(190),
  /**
   * <pre>
   *升级需要货币
   * </pre>
   *
   * <code>gpNeed = 191;</code>
   */
  gpNeed(191),
  /**
   * <pre>
   *最大可开孔数量
   * </pre>
   *
   * <code>maxHoleCount = 200;</code>
   */
  maxHoleCount(200),
  /**
   * <pre>
   *已开孔的数量
   * </pre>
   *
   * <code>holeCount = 201;</code>
   */
  holeCount(201),
  /**
   * <pre>
   *已开槽数量
   * </pre>
   *
   * <code>slotCount = 202;</code>
   */
  slotCount(202),
  /**
   * <pre>
   *和升星，服装有关系的影响战斗力、加血的参数。约为1.x
   * </pre>
   *
   * <code>gstFactorCostume = 210;</code>
   */
  gstFactorCostume(210),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *道具槽位号
   * </pre>
   *
   * <code>seq = 0;</code>
   */
  public static final int seq_VALUE = 0;
  /**
   * <pre>
   *对客户端输出的战斗力
   * </pre>
   *
   * <code>fightNum = 1;</code>
   */
  public static final int fightNum_VALUE = 1;
  /**
   * <pre>
   *下一级对客户端输出的战斗力
   * </pre>
   *
   * <code>fightNumNext = 2;</code>
   */
  public static final int fightNumNext_VALUE = 2;
  /**
   * <pre>
   *对客户端输出的战斗力（基础）
   * </pre>
   *
   * <code>fightNumBase = 3;</code>
   */
  public static final int fightNumBase_VALUE = 3;
  /**
   * <pre>
   *对客户端输出的战斗力（强化增加）
   * </pre>
   *
   * <code>fightNumAdd = 4;</code>
   */
  public static final int fightNumAdd_VALUE = 4;
  /**
   * <pre>
   *颜色
   * </pre>
   *
   * <code>color = 10;</code>
   */
  public static final int color_VALUE = 10;
  /**
   * <pre>
   *维修花费
   * </pre>
   *
   * <code>repaireCost = 20;</code>
   */
  public static final int repaireCost_VALUE = 20;
  /**
   * <pre>
   *武器威力
   * </pre>
   *
   * <code>damage = 100;</code>
   */
  public static final int damage_VALUE = 100;
  /**
   * <pre>
   *下一级武器威力
   * </pre>
   *
   * <code>damageNext = 101;</code>
   */
  public static final int damageNext_VALUE = 101;
  /**
   * <pre>
   *端游真实的武器威力
   * </pre>
   *
   * <code>damageDb = 102;</code>
   */
  public static final int damageDb_VALUE = 102;
  /**
   * <pre>
   *端游真实的下一级武器威力
   * </pre>
   *
   * <code>damageDbNext = 103;</code>
   */
  public static final int damageDbNext_VALUE = 103;
  /**
   * <pre>
   *射速
   * </pre>
   *
   * <code>shootSpeed = 110;</code>
   */
  public static final int shootSpeed_VALUE = 110;
  /**
   * <pre>
   *下一级射速
   * </pre>
   *
   * <code>shootSpeedNext = 111;</code>
   */
  public static final int shootSpeedNext_VALUE = 111;
  /**
   * <pre>
   *端游真实的射速
   * </pre>
   *
   * <code>shootSpeedDb = 112;</code>
   */
  public static final int shootSpeedDb_VALUE = 112;
  /**
   * <pre>
   *端游真实的下一级射速
   * </pre>
   *
   * <code>shootSpeedDbNext = 113;</code>
   */
  public static final int shootSpeedDbNext_VALUE = 113;
  /**
   * <pre>
   *火抗
   * </pre>
   *
   * <code>cResistanceFire = 140;</code>
   */
  public static final int cResistanceFire_VALUE = 140;
  /**
   * <pre>
   *下一级火抗
   * </pre>
   *
   * <code>cResistanceFireNext = 141;</code>
   */
  public static final int cResistanceFireNext_VALUE = 141;
  /**
   * <pre>
   *爆抗
   * </pre>
   *
   * <code>cResistanceBlast = 150;</code>
   */
  public static final int cResistanceBlast_VALUE = 150;
  /**
   * <pre>
   *下一级爆抗
   * </pre>
   *
   * <code>cResistanceBlastNext = 151;</code>
   */
  public static final int cResistanceBlastNext_VALUE = 151;
  /**
   * <pre>
   *弹抗
   * </pre>
   *
   * <code>cResistanceBullet = 160;</code>
   */
  public static final int cResistanceBullet_VALUE = 160;
  /**
   * <pre>
   *下一级弹抗
   * </pre>
   *
   * <code>cResistanceBulletNext = 161;</code>
   */
  public static final int cResistanceBulletNext_VALUE = 161;
  /**
   * <pre>
   *刀抗
   * </pre>
   *
   * <code>cResistanceKnife = 170;</code>
   */
  public static final int cResistanceKnife_VALUE = 170;
  /**
   * <pre>
   *下一级刀抗
   * </pre>
   *
   * <code>cResistanceKnifeNext = 171;</code>
   */
  public static final int cResistanceKnifeNext_VALUE = 171;
  /**
   * <pre>
   *加血
   * </pre>
   *
   * <code>cBloodAdd = 180;</code>
   */
  public static final int cBloodAdd_VALUE = 180;
  /**
   * <pre>
   *下一级加血
   * </pre>
   *
   * <code>cBloodAddNext = 181;</code>
   */
  public static final int cBloodAddNext_VALUE = 181;
  /**
   * <pre>
   *升级需要材料
   * </pre>
   *
   * <code>materialNeed = 190;</code>
   */
  public static final int materialNeed_VALUE = 190;
  /**
   * <pre>
   *升级需要货币
   * </pre>
   *
   * <code>gpNeed = 191;</code>
   */
  public static final int gpNeed_VALUE = 191;
  /**
   * <pre>
   *最大可开孔数量
   * </pre>
   *
   * <code>maxHoleCount = 200;</code>
   */
  public static final int maxHoleCount_VALUE = 200;
  /**
   * <pre>
   *已开孔的数量
   * </pre>
   *
   * <code>holeCount = 201;</code>
   */
  public static final int holeCount_VALUE = 201;
  /**
   * <pre>
   *已开槽数量
   * </pre>
   *
   * <code>slotCount = 202;</code>
   */
  public static final int slotCount_VALUE = 202;
  /**
   * <pre>
   *和升星，服装有关系的影响战斗力、加血的参数。约为1.x
   * </pre>
   *
   * <code>gstFactorCostume = 210;</code>
   */
  public static final int gstFactorCostume_VALUE = 210;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EItemNumberParam valueOf(int value) {
    return forNumber(value);
  }

  public static EItemNumberParam forNumber(int value) {
    switch (value) {
      case 0: return seq;
      case 1: return fightNum;
      case 2: return fightNumNext;
      case 3: return fightNumBase;
      case 4: return fightNumAdd;
      case 10: return color;
      case 20: return repaireCost;
      case 100: return damage;
      case 101: return damageNext;
      case 102: return damageDb;
      case 103: return damageDbNext;
      case 110: return shootSpeed;
      case 111: return shootSpeedNext;
      case 112: return shootSpeedDb;
      case 113: return shootSpeedDbNext;
      case 140: return cResistanceFire;
      case 141: return cResistanceFireNext;
      case 150: return cResistanceBlast;
      case 151: return cResistanceBlastNext;
      case 160: return cResistanceBullet;
      case 161: return cResistanceBulletNext;
      case 170: return cResistanceKnife;
      case 171: return cResistanceKnifeNext;
      case 180: return cBloodAdd;
      case 181: return cBloodAddNext;
      case 190: return materialNeed;
      case 191: return gpNeed;
      case 200: return maxHoleCount;
      case 201: return holeCount;
      case 202: return slotCount;
      case 210: return gstFactorCostume;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EItemNumberParam>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EItemNumberParam> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EItemNumberParam>() {
          public EItemNumberParam findValueByNumber(int number) {
            return EItemNumberParam.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.pearl.fcw.proto.enums.ApiProto.getDescriptor()
        .getEnumTypes().get(0);
  }

  private static final EItemNumberParam[] VALUES = values();

  public static EItemNumberParam valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EItemNumberParam(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:fcw.proto.enums.other.EItemNumberParam)
}

