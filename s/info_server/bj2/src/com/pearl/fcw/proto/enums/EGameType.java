// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums/type.proto

package com.pearl.fcw.proto.enums;

/**
 * <pre>
 *游戏类型(对应sysLevel的type字段)
 * </pre>
 *
 * Protobuf enum {@code fcw.proto.enums.type.EGameType}
 */
public enum EGameType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *团队竞技
   * </pre>
   *
   * <code>TEAM = 0;</code>
   */
  TEAM(0),
  /**
   * <pre>
   *占点
   * </pre>
   *
   * <code>TARGET = 1;</code>
   */
  TARGET(1),
  /**
   * <pre>
   *推车
   * </pre>
   *
   * <code>DELIVER = 2;</code>
   */
  DELIVER(2),
  /**
   * <pre>
   *新手关
   * </pre>
   *
   * <code>NEWTRAIN = 3;</code>
   */
  NEWTRAIN(3),
  /**
   * <pre>
   *歼灭
   * </pre>
   *
   * <code>DESTROY = 4;</code>
   */
  DESTROY(4),
  /**
   * <pre>
   *BOSS战
   * </pre>
   *
   * <code>HITBOSS = 5;</code>
   */
  HITBOSS(5),
  /**
   * <pre>
   *刀战
   * </pre>
   *
   * <code>KNIFE = 6;</code>
   */
  KNIFE(6),
  /**
   * <pre>
   *爆破
   * </pre>
   *
   * <code>BLAST = 7;</code>
   */
  BLAST(7),
  /**
   * <pre>
   *英雄
   * </pre>
   *
   * <code>STREETBOY = 8;</code>
   */
  STREETBOY(8),
  /**
   * <pre>
   *老生化
   * </pre>
   *
   * <code>BIOCHEMICAL = 9;</code>
   */
  BIOCHEMICAL(9),
  /**
   * <pre>
   *审判
   * </pre>
   *
   * <code>BOSS2 = 10;</code>
   */
  BOSS2(10),
  /**
   * <pre>
   *生化感染
   * </pre>
   *
   * <code>BIOCHEMICAL2 = 11;</code>
   */
  BIOCHEMICAL2(11),
  /**
   * <pre>
   *BOSS末日进化
   * </pre>
   *
   * <code>HITBOSS2 = 12;</code>
   */
  HITBOSS2(12),
  /**
   * <pre>
   *道具战
   * </pre>
   *
   * <code>AMAZINGWAR = 13;</code>
   */
  AMAZINGWAR(13),
  /**
   * <pre>
   *资源争夺战编辑模式
   * </pre>
   *
   * <code>TEAMEDIT = 14;</code>
   */
  TEAMEDIT(14),
  /**
   * <pre>
   *资源争夺战
   * </pre>
   *
   * <code>TEAMZYZDZ = 15;</code>
   */
  TEAMZYZDZ(15),
  /**
   * <pre>
   *勇者攀登
   * </pre>
   *
   * <code>AGRAVITY = 16;</code>
   */
  AGRAVITY(16),
  /**
   * <pre>
   *圣诞跳跳乐
   * </pre>
   *
   * <code>AGRAVITY2 = 17;</code>
   */
  AGRAVITY2(17),
  /**
   * <pre>
   *冒险岛（生存模式）
   * </pre>
   *
   * <code>RISK_ISLET = 18;</code>
   */
  RISK_ISLET(18),
  /**
   * <pre>
   *BOSS PVE
   * </pre>
   *
   * <code>BOSS_PVE = 19;</code>
   */
  BOSS_PVE(19),
  /**
   * <pre>
   *TEAM_MATCH = 20;//匹配模式的团队竞技
   * </pre>
   *
   * <code>MATCH_TEAM = 100;</code>
   */
  MATCH_TEAM(100),
  /**
   * <pre>
   *匹配模式的歼灭
   * </pre>
   *
   * <code>MATCH_DESTROY = 104;</code>
   */
  MATCH_DESTROY(104),
  /**
   * <pre>
   *匹配模式的生化感染
   * </pre>
   *
   * <code>MATCH_BIOCHEMICAL2 = 111;</code>
   */
  MATCH_BIOCHEMICAL2(111),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *团队竞技
   * </pre>
   *
   * <code>TEAM = 0;</code>
   */
  public static final int TEAM_VALUE = 0;
  /**
   * <pre>
   *占点
   * </pre>
   *
   * <code>TARGET = 1;</code>
   */
  public static final int TARGET_VALUE = 1;
  /**
   * <pre>
   *推车
   * </pre>
   *
   * <code>DELIVER = 2;</code>
   */
  public static final int DELIVER_VALUE = 2;
  /**
   * <pre>
   *新手关
   * </pre>
   *
   * <code>NEWTRAIN = 3;</code>
   */
  public static final int NEWTRAIN_VALUE = 3;
  /**
   * <pre>
   *歼灭
   * </pre>
   *
   * <code>DESTROY = 4;</code>
   */
  public static final int DESTROY_VALUE = 4;
  /**
   * <pre>
   *BOSS战
   * </pre>
   *
   * <code>HITBOSS = 5;</code>
   */
  public static final int HITBOSS_VALUE = 5;
  /**
   * <pre>
   *刀战
   * </pre>
   *
   * <code>KNIFE = 6;</code>
   */
  public static final int KNIFE_VALUE = 6;
  /**
   * <pre>
   *爆破
   * </pre>
   *
   * <code>BLAST = 7;</code>
   */
  public static final int BLAST_VALUE = 7;
  /**
   * <pre>
   *英雄
   * </pre>
   *
   * <code>STREETBOY = 8;</code>
   */
  public static final int STREETBOY_VALUE = 8;
  /**
   * <pre>
   *老生化
   * </pre>
   *
   * <code>BIOCHEMICAL = 9;</code>
   */
  public static final int BIOCHEMICAL_VALUE = 9;
  /**
   * <pre>
   *审判
   * </pre>
   *
   * <code>BOSS2 = 10;</code>
   */
  public static final int BOSS2_VALUE = 10;
  /**
   * <pre>
   *生化感染
   * </pre>
   *
   * <code>BIOCHEMICAL2 = 11;</code>
   */
  public static final int BIOCHEMICAL2_VALUE = 11;
  /**
   * <pre>
   *BOSS末日进化
   * </pre>
   *
   * <code>HITBOSS2 = 12;</code>
   */
  public static final int HITBOSS2_VALUE = 12;
  /**
   * <pre>
   *道具战
   * </pre>
   *
   * <code>AMAZINGWAR = 13;</code>
   */
  public static final int AMAZINGWAR_VALUE = 13;
  /**
   * <pre>
   *资源争夺战编辑模式
   * </pre>
   *
   * <code>TEAMEDIT = 14;</code>
   */
  public static final int TEAMEDIT_VALUE = 14;
  /**
   * <pre>
   *资源争夺战
   * </pre>
   *
   * <code>TEAMZYZDZ = 15;</code>
   */
  public static final int TEAMZYZDZ_VALUE = 15;
  /**
   * <pre>
   *勇者攀登
   * </pre>
   *
   * <code>AGRAVITY = 16;</code>
   */
  public static final int AGRAVITY_VALUE = 16;
  /**
   * <pre>
   *圣诞跳跳乐
   * </pre>
   *
   * <code>AGRAVITY2 = 17;</code>
   */
  public static final int AGRAVITY2_VALUE = 17;
  /**
   * <pre>
   *冒险岛（生存模式）
   * </pre>
   *
   * <code>RISK_ISLET = 18;</code>
   */
  public static final int RISK_ISLET_VALUE = 18;
  /**
   * <pre>
   *BOSS PVE
   * </pre>
   *
   * <code>BOSS_PVE = 19;</code>
   */
  public static final int BOSS_PVE_VALUE = 19;
  /**
   * <pre>
   *TEAM_MATCH = 20;//匹配模式的团队竞技
   * </pre>
   *
   * <code>MATCH_TEAM = 100;</code>
   */
  public static final int MATCH_TEAM_VALUE = 100;
  /**
   * <pre>
   *匹配模式的歼灭
   * </pre>
   *
   * <code>MATCH_DESTROY = 104;</code>
   */
  public static final int MATCH_DESTROY_VALUE = 104;
  /**
   * <pre>
   *匹配模式的生化感染
   * </pre>
   *
   * <code>MATCH_BIOCHEMICAL2 = 111;</code>
   */
  public static final int MATCH_BIOCHEMICAL2_VALUE = 111;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EGameType valueOf(int value) {
    return forNumber(value);
  }

  public static EGameType forNumber(int value) {
    switch (value) {
      case 0: return TEAM;
      case 1: return TARGET;
      case 2: return DELIVER;
      case 3: return NEWTRAIN;
      case 4: return DESTROY;
      case 5: return HITBOSS;
      case 6: return KNIFE;
      case 7: return BLAST;
      case 8: return STREETBOY;
      case 9: return BIOCHEMICAL;
      case 10: return BOSS2;
      case 11: return BIOCHEMICAL2;
      case 12: return HITBOSS2;
      case 13: return AMAZINGWAR;
      case 14: return TEAMEDIT;
      case 15: return TEAMZYZDZ;
      case 16: return AGRAVITY;
      case 17: return AGRAVITY2;
      case 18: return RISK_ISLET;
      case 19: return BOSS_PVE;
      case 100: return MATCH_TEAM;
      case 104: return MATCH_DESTROY;
      case 111: return MATCH_BIOCHEMICAL2;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EGameType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EGameType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EGameType>() {
          public EGameType findValueByNumber(int number) {
            return EGameType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.pearl.fcw.proto.enums.ApiProto.getDescriptor()
        .getEnumTypes().get(6);
  }

  private static final EGameType[] VALUES = values();

  public static EGameType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EGameType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:fcw.proto.enums.type.EGameType)
}

