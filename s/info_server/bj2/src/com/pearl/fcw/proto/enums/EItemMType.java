// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums/type.proto

package com.pearl.fcw.proto.enums;

/**
 * <pre>
 *对应sysItem的mType字段
 * </pre>
 *
 * Protobuf enum {@code fcw.proto.enums.type.EItemMType}
 */
public enum EItemMType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>M_NONE = 0;</code>
   */
  M_NONE(0),
  /**
   * <pre>
   *强化部件
   * </pre>
   *
   * <code>M_STRENGTH_PART = 1;</code>
   */
  M_STRENGTH_PART(1),
  /**
   * <pre>
   *增幅装置
   * </pre>
   *
   * <code>M_ADD_S = 2;</code>
   */
  M_ADD_S(2),
  /**
   * <pre>
   *安定装置
   * </pre>
   *
   * <code>M_NOT_BREAK = 3;</code>
   */
  M_NOT_BREAK(3),
  /**
   * <pre>
   *保障装置
   * </pre>
   *
   * <code>M_NOT_BACK_LEVEL = 4;</code>
   */
  M_NOT_BACK_LEVEL(4),
  /**
   * <pre>
   *强化增幅装置
   * </pre>
   *
   * <code>M_STRENGTH_ADD_S = 5;</code>
   */
  M_STRENGTH_ADD_S(5),
  /**
   * <pre>
   *勋章
   * </pre>
   *
   * <code>M_HONOR = 6;</code>
   */
  M_HONOR(6),
  /**
   * <pre>
   *密码卡
   * </pre>
   *
   * <code>M_PASSWORD_CARD = 7;</code>
   */
  M_PASSWORD_CARD(7),
  /**
   * <pre>
   *武器属性部件
   * </pre>
   *
   * <code>M_WEAPON_PART = 8;</code>
   */
  M_WEAPON_PART(8),
  /**
   * <pre>
   *服饰属性部件
   * </pre>
   *
   * <code>M_CLOTH_PART = 9;</code>
   */
  M_CLOTH_PART(9),
  /**
   * <pre>
   *转换工具（拆）
   * </pre>
   *
   * <code>M_CONVERT_PART = 10;</code>
   */
  M_CONVERT_PART(10),
  /**
   * <pre>
   *改装部件
   * </pre>
   *
   * <code>M_INSERT_PART = 11;</code>
   */
  M_INSERT_PART(11),
  /**
   * <code>M_TYPE_15 = 15;</code>
   */
  M_TYPE_15(15),
  /**
   * <pre>
   *熔炼部件-加工装置
   * </pre>
   *
   * <code>M_MELTING_UNIT = 31;</code>
   */
  M_MELTING_UNIT(31),
  /**
   * <pre>
   *熔炼部件-配方
   * </pre>
   *
   * <code>M_MELTING_FORMULA = 32;</code>
   */
  M_MELTING_FORMULA(32),
  /**
   * <pre>
   *不可熔炼和续费
   * </pre>
   *
   * <code>M_NOT_MELTING_NOT_RENEWAL = 33;</code>
   */
  M_NOT_MELTING_NOT_RENEWAL(33),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>M_NONE = 0;</code>
   */
  public static final int M_NONE_VALUE = 0;
  /**
   * <pre>
   *强化部件
   * </pre>
   *
   * <code>M_STRENGTH_PART = 1;</code>
   */
  public static final int M_STRENGTH_PART_VALUE = 1;
  /**
   * <pre>
   *增幅装置
   * </pre>
   *
   * <code>M_ADD_S = 2;</code>
   */
  public static final int M_ADD_S_VALUE = 2;
  /**
   * <pre>
   *安定装置
   * </pre>
   *
   * <code>M_NOT_BREAK = 3;</code>
   */
  public static final int M_NOT_BREAK_VALUE = 3;
  /**
   * <pre>
   *保障装置
   * </pre>
   *
   * <code>M_NOT_BACK_LEVEL = 4;</code>
   */
  public static final int M_NOT_BACK_LEVEL_VALUE = 4;
  /**
   * <pre>
   *强化增幅装置
   * </pre>
   *
   * <code>M_STRENGTH_ADD_S = 5;</code>
   */
  public static final int M_STRENGTH_ADD_S_VALUE = 5;
  /**
   * <pre>
   *勋章
   * </pre>
   *
   * <code>M_HONOR = 6;</code>
   */
  public static final int M_HONOR_VALUE = 6;
  /**
   * <pre>
   *密码卡
   * </pre>
   *
   * <code>M_PASSWORD_CARD = 7;</code>
   */
  public static final int M_PASSWORD_CARD_VALUE = 7;
  /**
   * <pre>
   *武器属性部件
   * </pre>
   *
   * <code>M_WEAPON_PART = 8;</code>
   */
  public static final int M_WEAPON_PART_VALUE = 8;
  /**
   * <pre>
   *服饰属性部件
   * </pre>
   *
   * <code>M_CLOTH_PART = 9;</code>
   */
  public static final int M_CLOTH_PART_VALUE = 9;
  /**
   * <pre>
   *转换工具（拆）
   * </pre>
   *
   * <code>M_CONVERT_PART = 10;</code>
   */
  public static final int M_CONVERT_PART_VALUE = 10;
  /**
   * <pre>
   *改装部件
   * </pre>
   *
   * <code>M_INSERT_PART = 11;</code>
   */
  public static final int M_INSERT_PART_VALUE = 11;
  /**
   * <code>M_TYPE_15 = 15;</code>
   */
  public static final int M_TYPE_15_VALUE = 15;
  /**
   * <pre>
   *熔炼部件-加工装置
   * </pre>
   *
   * <code>M_MELTING_UNIT = 31;</code>
   */
  public static final int M_MELTING_UNIT_VALUE = 31;
  /**
   * <pre>
   *熔炼部件-配方
   * </pre>
   *
   * <code>M_MELTING_FORMULA = 32;</code>
   */
  public static final int M_MELTING_FORMULA_VALUE = 32;
  /**
   * <pre>
   *不可熔炼和续费
   * </pre>
   *
   * <code>M_NOT_MELTING_NOT_RENEWAL = 33;</code>
   */
  public static final int M_NOT_MELTING_NOT_RENEWAL_VALUE = 33;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EItemMType valueOf(int value) {
    return forNumber(value);
  }

  public static EItemMType forNumber(int value) {
    switch (value) {
      case 0: return M_NONE;
      case 1: return M_STRENGTH_PART;
      case 2: return M_ADD_S;
      case 3: return M_NOT_BREAK;
      case 4: return M_NOT_BACK_LEVEL;
      case 5: return M_STRENGTH_ADD_S;
      case 6: return M_HONOR;
      case 7: return M_PASSWORD_CARD;
      case 8: return M_WEAPON_PART;
      case 9: return M_CLOTH_PART;
      case 10: return M_CONVERT_PART;
      case 11: return M_INSERT_PART;
      case 15: return M_TYPE_15;
      case 31: return M_MELTING_UNIT;
      case 32: return M_MELTING_FORMULA;
      case 33: return M_NOT_MELTING_NOT_RENEWAL;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EItemMType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EItemMType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EItemMType>() {
          public EItemMType findValueByNumber(int number) {
            return EItemMType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.pearl.fcw.proto.enums.ApiProto.getDescriptor()
        .getEnumTypes().get(12);
  }

  private static final EItemMType[] VALUES = values();

  public static EItemMType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EItemMType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:fcw.proto.enums.type.EItemMType)
}

