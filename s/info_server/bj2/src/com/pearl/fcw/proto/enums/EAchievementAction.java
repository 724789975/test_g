// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums/type.proto

package com.pearl.fcw.proto.enums;

/**
 * <pre>
 *玩家成就操作类型(对应sysAchievement的action字段，以及sysActivity的achievementAction字段)
 * </pre>
 *
 * Protobuf enum {@code fcw.proto.enums.type.EAchievementAction}
 */
public enum EAchievementAction
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <pre>
   *里程碑成就
   * </pre>
   *
   * <code>MILESTONE = 0;</code>
   */
  MILESTONE(0),
  /**
   * <pre>
   *升级成就
   * </pre>
   *
   * <code>LEVELUP = 1;</code>
   */
  LEVELUP(1),
  /**
   * <pre>
   *新手训练成就
   * </pre>
   *
   * <code>NEWPLAYER = 2;</code>
   */
  NEWPLAYER(2),
  /**
   * <pre>
   *赢得游戏
   * </pre>
   *
   * <code>GAMEWIN = 3;</code>
   */
  GAMEWIN(3),
  /**
   * <pre>
   *通用击杀
   * </pre>
   *
   * <code>GENERALKILL = 4;</code>
   */
  GENERALKILL(4),
  /**
   * <pre>
   *控制击杀
   * </pre>
   *
   * <code>CONTROLKILL = 5;</code>
   */
  CONTROLKILL(5),
  /**
   * <pre>
   *复仇击杀
   * </pre>
   *
   * <code>REVENGEKILL = 6;</code>
   */
  REVENGEKILL(6),
  /**
   * <pre>
   *击杀指定职业
   * </pre>
   *
   * <code>CHARCTERKILL = 9;</code>
   */
  CHARCTERKILL(9),
  /**
   * <pre>
   *吃血包
   * </pre>
   *
   * <code>BLOODBAG = 7;</code>
   */
  BLOODBAG(7),
  /**
   * <pre>
   *吃弹药包
   * </pre>
   *
   * <code>BULLETBAG = 8;</code>
   */
  BULLETBAG(8),
  /**
   * <pre>
   *刷大喇叭
   * </pre>
   *
   * <code>DALABA = 11;</code>
   */
  DALABA(11),
  /**
   * <pre>
   *好友数量
   * </pre>
   *
   * <code>FRIENDS = 12;</code>
   */
  FRIENDS(12),
  /**
   * <pre>
   *消费雷点
   * </pre>
   *
   * <code>USECR = 13;</code>
   */
  USECR(13),
  /**
   * <pre>
   *赠送雷点
   * </pre>
   *
   * <code>GIFTCR = 14;</code>
   */
  GIFTCR(14),
  /**
   * <pre>
   *第一滴血
   * </pre>
   *
   * <code>FIRSTKILL = 15;</code>
   */
  FIRSTKILL(15),
  /**
   * <pre>
   *第一滴被血
   * </pre>
   *
   * <code>FIRSTDEAD = 16;</code>
   */
  FIRSTDEAD(16),
  /**
   * <pre>
   *连杀
   * </pre>
   *
   * <code>CONTINUEKILL = 17;</code>
   */
  CONTINUEKILL(17),
  /**
   * <pre>
   *获得主武器
   * </pre>
   *
   * <code>GETWEAPON = 21;</code>
   */
  GETWEAPON(21),
  /**
   * <pre>
   *获得近战武器
   * </pre>
   *
   * <code>GETKNIFE = 22;</code>
   */
  GETKNIFE(22),
  /**
   * <pre>
   *获得衣服
   * </pre>
   *
   * <code>GETCOSTUME = 23;</code>
   */
  GETCOSTUME(23),
  /**
   * <pre>
   *近战武器击杀
   * </pre>
   *
   * <code>KNIFEKILL = 24;</code>
   */
  KNIFEKILL(24),
  /**
   * <pre>
   *最大伤害量
   * </pre>
   *
   * <code>MAXDAMAGE = 25;</code>
   */
  MAXDAMAGE(25),
  /**
   * <pre>
   *助攻数
   * </pre>
   *
   * <code>ASSISTNUM = 26;</code>
   */
  ASSISTNUM(26),
  /**
   * <pre>
   *暴击击杀
   * </pre>
   *
   * <code>BOOSTKILL = 27;</code>
   */
  BOOSTKILL(27),
  /**
   * <pre>
   *最大存活时间
   * </pre>
   *
   * <code>MAXALIVE = 28;</code>
   */
  MAXALIVE(28),
  /**
   * <pre>
   *获得mvp次数
   * </pre>
   *
   * <code>MVPNUM = 30;</code>
   */
  MVPNUM(30),
  /**
   * <pre>
   *爆头击杀
   * </pre>
   *
   * <code>HEADSHOT = 31;</code>
   */
  HEADSHOT(31),
  /**
   * <pre>
   *雷杀
   * </pre>
   *
   * <code>GRENADEKILL = 32;</code>
   */
  GRENADEKILL(32),
  /**
   * <pre>
   *余焰击杀
   * </pre>
   *
   * <code>SUSTAINKILL = 33;</code>
   */
  SUSTAINKILL(33),
  /**
   * <pre>
   *完成比赛
   * </pre>
   *
   * <code>FINISHGAME = 34;</code>
   */
  FINISHGAME(34),
  /**
   * <pre>
   *治疗量
   * </pre>
   *
   * <code>HEALTHNUM = 35;</code>
   */
  HEALTHNUM(35),
  /**
   * <pre>
   *mvp
   * </pre>
   *
   * <code>HEALTHMVP = 36;</code>
   */
  HEALTHMVP(36),
  /**
   * <pre>
   *最大治疗量
   * </pre>
   *
   * <code>HEALTHMAX = 37;</code>
   */
  HEALTHMAX(37),
  UNRECOGNIZED(-1),
  ;

  /**
   * <pre>
   *里程碑成就
   * </pre>
   *
   * <code>MILESTONE = 0;</code>
   */
  public static final int MILESTONE_VALUE = 0;
  /**
   * <pre>
   *升级成就
   * </pre>
   *
   * <code>LEVELUP = 1;</code>
   */
  public static final int LEVELUP_VALUE = 1;
  /**
   * <pre>
   *新手训练成就
   * </pre>
   *
   * <code>NEWPLAYER = 2;</code>
   */
  public static final int NEWPLAYER_VALUE = 2;
  /**
   * <pre>
   *赢得游戏
   * </pre>
   *
   * <code>GAMEWIN = 3;</code>
   */
  public static final int GAMEWIN_VALUE = 3;
  /**
   * <pre>
   *通用击杀
   * </pre>
   *
   * <code>GENERALKILL = 4;</code>
   */
  public static final int GENERALKILL_VALUE = 4;
  /**
   * <pre>
   *控制击杀
   * </pre>
   *
   * <code>CONTROLKILL = 5;</code>
   */
  public static final int CONTROLKILL_VALUE = 5;
  /**
   * <pre>
   *复仇击杀
   * </pre>
   *
   * <code>REVENGEKILL = 6;</code>
   */
  public static final int REVENGEKILL_VALUE = 6;
  /**
   * <pre>
   *击杀指定职业
   * </pre>
   *
   * <code>CHARCTERKILL = 9;</code>
   */
  public static final int CHARCTERKILL_VALUE = 9;
  /**
   * <pre>
   *吃血包
   * </pre>
   *
   * <code>BLOODBAG = 7;</code>
   */
  public static final int BLOODBAG_VALUE = 7;
  /**
   * <pre>
   *吃弹药包
   * </pre>
   *
   * <code>BULLETBAG = 8;</code>
   */
  public static final int BULLETBAG_VALUE = 8;
  /**
   * <pre>
   *刷大喇叭
   * </pre>
   *
   * <code>DALABA = 11;</code>
   */
  public static final int DALABA_VALUE = 11;
  /**
   * <pre>
   *好友数量
   * </pre>
   *
   * <code>FRIENDS = 12;</code>
   */
  public static final int FRIENDS_VALUE = 12;
  /**
   * <pre>
   *消费雷点
   * </pre>
   *
   * <code>USECR = 13;</code>
   */
  public static final int USECR_VALUE = 13;
  /**
   * <pre>
   *赠送雷点
   * </pre>
   *
   * <code>GIFTCR = 14;</code>
   */
  public static final int GIFTCR_VALUE = 14;
  /**
   * <pre>
   *第一滴血
   * </pre>
   *
   * <code>FIRSTKILL = 15;</code>
   */
  public static final int FIRSTKILL_VALUE = 15;
  /**
   * <pre>
   *第一滴被血
   * </pre>
   *
   * <code>FIRSTDEAD = 16;</code>
   */
  public static final int FIRSTDEAD_VALUE = 16;
  /**
   * <pre>
   *连杀
   * </pre>
   *
   * <code>CONTINUEKILL = 17;</code>
   */
  public static final int CONTINUEKILL_VALUE = 17;
  /**
   * <pre>
   *获得主武器
   * </pre>
   *
   * <code>GETWEAPON = 21;</code>
   */
  public static final int GETWEAPON_VALUE = 21;
  /**
   * <pre>
   *获得近战武器
   * </pre>
   *
   * <code>GETKNIFE = 22;</code>
   */
  public static final int GETKNIFE_VALUE = 22;
  /**
   * <pre>
   *获得衣服
   * </pre>
   *
   * <code>GETCOSTUME = 23;</code>
   */
  public static final int GETCOSTUME_VALUE = 23;
  /**
   * <pre>
   *近战武器击杀
   * </pre>
   *
   * <code>KNIFEKILL = 24;</code>
   */
  public static final int KNIFEKILL_VALUE = 24;
  /**
   * <pre>
   *最大伤害量
   * </pre>
   *
   * <code>MAXDAMAGE = 25;</code>
   */
  public static final int MAXDAMAGE_VALUE = 25;
  /**
   * <pre>
   *助攻数
   * </pre>
   *
   * <code>ASSISTNUM = 26;</code>
   */
  public static final int ASSISTNUM_VALUE = 26;
  /**
   * <pre>
   *暴击击杀
   * </pre>
   *
   * <code>BOOSTKILL = 27;</code>
   */
  public static final int BOOSTKILL_VALUE = 27;
  /**
   * <pre>
   *最大存活时间
   * </pre>
   *
   * <code>MAXALIVE = 28;</code>
   */
  public static final int MAXALIVE_VALUE = 28;
  /**
   * <pre>
   *获得mvp次数
   * </pre>
   *
   * <code>MVPNUM = 30;</code>
   */
  public static final int MVPNUM_VALUE = 30;
  /**
   * <pre>
   *爆头击杀
   * </pre>
   *
   * <code>HEADSHOT = 31;</code>
   */
  public static final int HEADSHOT_VALUE = 31;
  /**
   * <pre>
   *雷杀
   * </pre>
   *
   * <code>GRENADEKILL = 32;</code>
   */
  public static final int GRENADEKILL_VALUE = 32;
  /**
   * <pre>
   *余焰击杀
   * </pre>
   *
   * <code>SUSTAINKILL = 33;</code>
   */
  public static final int SUSTAINKILL_VALUE = 33;
  /**
   * <pre>
   *完成比赛
   * </pre>
   *
   * <code>FINISHGAME = 34;</code>
   */
  public static final int FINISHGAME_VALUE = 34;
  /**
   * <pre>
   *治疗量
   * </pre>
   *
   * <code>HEALTHNUM = 35;</code>
   */
  public static final int HEALTHNUM_VALUE = 35;
  /**
   * <pre>
   *mvp
   * </pre>
   *
   * <code>HEALTHMVP = 36;</code>
   */
  public static final int HEALTHMVP_VALUE = 36;
  /**
   * <pre>
   *最大治疗量
   * </pre>
   *
   * <code>HEALTHMAX = 37;</code>
   */
  public static final int HEALTHMAX_VALUE = 37;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EAchievementAction valueOf(int value) {
    return forNumber(value);
  }

  public static EAchievementAction forNumber(int value) {
    switch (value) {
      case 0: return MILESTONE;
      case 1: return LEVELUP;
      case 2: return NEWPLAYER;
      case 3: return GAMEWIN;
      case 4: return GENERALKILL;
      case 5: return CONTROLKILL;
      case 6: return REVENGEKILL;
      case 9: return CHARCTERKILL;
      case 7: return BLOODBAG;
      case 8: return BULLETBAG;
      case 11: return DALABA;
      case 12: return FRIENDS;
      case 13: return USECR;
      case 14: return GIFTCR;
      case 15: return FIRSTKILL;
      case 16: return FIRSTDEAD;
      case 17: return CONTINUEKILL;
      case 21: return GETWEAPON;
      case 22: return GETKNIFE;
      case 23: return GETCOSTUME;
      case 24: return KNIFEKILL;
      case 25: return MAXDAMAGE;
      case 26: return ASSISTNUM;
      case 27: return BOOSTKILL;
      case 28: return MAXALIVE;
      case 30: return MVPNUM;
      case 31: return HEADSHOT;
      case 32: return GRENADEKILL;
      case 33: return SUSTAINKILL;
      case 34: return FINISHGAME;
      case 35: return HEALTHNUM;
      case 36: return HEALTHMVP;
      case 37: return HEALTHMAX;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EAchievementAction>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EAchievementAction> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EAchievementAction>() {
          public EAchievementAction findValueByNumber(int number) {
            return EAchievementAction.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.pearl.fcw.proto.enums.ApiProto.getDescriptor()
        .getEnumTypes().get(23);
  }

  private static final EAchievementAction[] VALUES = values();

  public static EAchievementAction valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EAchievementAction(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:fcw.proto.enums.type.EAchievementAction)
}

