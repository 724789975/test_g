// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: enums/type.proto

package com.pearl.fcw.proto.enums;

/**
 * <pre>
 *对应sysItem的wId字段
 * </pre>
 *
 * Protobuf enum {@code fcw.proto.enums.type.EItemWId}
 */
public enum EItemWId
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>WID_NONE = 0;</code>
   */
  WID_NONE(0),
  /**
   * <pre>
   *手枪
   * </pre>
   *
   * <code>WID_PISTOL = 1;</code>
   */
  WID_PISTOL(1),
  /**
   * <pre>
   *冲锋	枪
   * </pre>
   *
   * <code>WID_SUBMACHINE = 2;</code>
   */
  WID_SUBMACHINE(2),
  /**
   * <pre>
   *自动步枪
   * </pre>
   *
   * <code>WID_RIFFLE = 3;</code>
   */
  WID_RIFFLE(3),
  /**
   * <pre>
   *狙击枪
   * </pre>
   *
   * <code>WID_SNIPER_GUN = 4;</code>
   */
  WID_SNIPER_GUN(4),
  /**
   * <pre>
   *散弹枪
   * </pre>
   *
   * <code>WID_SHOT_GUN = 5;</code>
   */
  WID_SHOT_GUN(5),
  /**
   * <pre>
   *机枪
   * </pre>
   *
   * <code>WID_MACHINE_GUN = 6;</code>
   */
  WID_MACHINE_GUN(6),
  /**
   * <pre>
   *mini枪
   * </pre>
   *
   * <code>WID_MINI_GUN = 7;</code>
   */
  WID_MINI_GUN(7),
  /**
   * <pre>
   *双枪
   * </pre>
   *
   * <code>WID_DOUBLE_PISTOL = 8;</code>
   */
  WID_DOUBLE_PISTOL(8),
  /**
   * <pre>
   *MeditNeedleGun针筒枪
   * </pre>
   *
   * <code>WID_MEDITNEEDLE_GUN = 9;</code>
   */
  WID_MEDITNEEDLE_GUN(9),
  /**
   * <code>WID_BOSSPVE = 10;</code>
   */
  WID_BOSSPVE(10),
  /**
   * <pre>
   *	WID_MED_GUN_ID			= 12;//医疗塔
   * </pre>
   *
   * <code>WID_JQT_GUN = 13;</code>
   */
  WID_JQT_GUN(13),
  /**
   * <pre>
   *信号枪
   * </pre>
   *
   * <code>WID_SIGNAL_GUN = 14;</code>
   */
  WID_SIGNAL_GUN(14),
  /**
   * <pre>
   *治疗枪
   * </pre>
   *
   * <code>WID_CURE_GUN = 15;</code>
   */
  WID_CURE_GUN(15),
  /**
   * <pre>
   *喷火枪
   * </pre>
   *
   * <code>WID_FLAME_GUN = 16;</code>
   */
  WID_FLAME_GUN(16),
  /**
   * <pre>
   *火箭筒
   * </pre>
   *
   * <code>WID_ROCKET_LUNCHER = 17;</code>
   */
  WID_ROCKET_LUNCHER(17),
  /**
   * <pre>
   *弓
   * </pre>
   *
   * <code>WID_BOW = 18;</code>
   */
  WID_BOW(18),
  /**
   * <pre>
   *刀
   * </pre>
   *
   * <code>WID_KNIFE = 19;</code>
   */
  WID_KNIFE(19),
  /**
   * <code>WID_THROW = 20;</code>
   */
  WID_THROW(20),
  /**
   * <pre>
   *闪光弹
   * </pre>
   *
   * <code>WID_FLASH = 21;</code>
   */
  WID_FLASH(21),
  /**
   * <pre>
   *烟雾弹
   * </pre>
   *
   * <code>WID_SMOKE = 22;</code>
   */
  WID_SMOKE(22),
  /**
   * <pre>
   *手雷
   * </pre>
   *
   * <code>WID_GRENADE = 23;</code>
   */
  WID_GRENADE(23),
  /**
   * <pre>
   *箭
   * </pre>
   *
   * <code>WID_AMMO_GRENADE = 42;</code>
   */
  WID_AMMO_GRENADE(42),
  /**
   * <pre>
   *箭
   * </pre>
   *
   * <code>WID_ARROW = 45;</code>
   */
  WID_ARROW(45),
  /**
   * <code>WID_WAR_DRUM = 47;</code>
   */
  WID_WAR_DRUM(47),
  /**
   * <code>WID_MILK = 48;</code>
   */
  WID_MILK(48),
  /**
   * <code>WID_GLASS = 49;</code>
   */
  WID_GLASS(49),
  /**
   * <pre>
   *僵尸主武器
   * </pre>
   *
   * <code>WID_BIOCHEMICAL = 51;</code>
   */
  WID_BIOCHEMICAL(51),
  /**
   * <pre>
   *僵尸副武器
   * </pre>
   *
   * <code>WID_BIOCHEMICAL_AVO = 52;</code>
   */
  WID_BIOCHEMICAL_AVO(52),
  /**
   * <pre>
   *默认资源争夺战 编辑模式带入武器
   * </pre>
   *
   * <code>WID_ZYZDZ_EDIT_DEFAULT = 54;</code>
   */
  WID_ZYZDZ_EDIT_DEFAULT(54),
  /**
   * <pre>
   *初级防御塔
   * </pre>
   *
   * <code>WID_TEAM_ELEMENTARY_TOWER = 100;</code>
   */
  WID_TEAM_ELEMENTARY_TOWER(100),
  /**
   * <pre>
   *中级防御塔
   * </pre>
   *
   * <code>WID_TEAM_MIDDLE_TOWER = 101;</code>
   */
  WID_TEAM_MIDDLE_TOWER(101),
  /**
   * <pre>
   *高级防御塔
   * </pre>
   *
   * <code>WID_TEAM_ADVANCED_TOWER = 102;</code>
   */
  WID_TEAM_ADVANCED_TOWER(102),
  /**
   * <code>WID_ZYZDZ_OIL_POT = 103;</code>
   */
  WID_ZYZDZ_OIL_POT(103),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>WID_NONE = 0;</code>
   */
  public static final int WID_NONE_VALUE = 0;
  /**
   * <pre>
   *手枪
   * </pre>
   *
   * <code>WID_PISTOL = 1;</code>
   */
  public static final int WID_PISTOL_VALUE = 1;
  /**
   * <pre>
   *冲锋	枪
   * </pre>
   *
   * <code>WID_SUBMACHINE = 2;</code>
   */
  public static final int WID_SUBMACHINE_VALUE = 2;
  /**
   * <pre>
   *自动步枪
   * </pre>
   *
   * <code>WID_RIFFLE = 3;</code>
   */
  public static final int WID_RIFFLE_VALUE = 3;
  /**
   * <pre>
   *狙击枪
   * </pre>
   *
   * <code>WID_SNIPER_GUN = 4;</code>
   */
  public static final int WID_SNIPER_GUN_VALUE = 4;
  /**
   * <pre>
   *散弹枪
   * </pre>
   *
   * <code>WID_SHOT_GUN = 5;</code>
   */
  public static final int WID_SHOT_GUN_VALUE = 5;
  /**
   * <pre>
   *机枪
   * </pre>
   *
   * <code>WID_MACHINE_GUN = 6;</code>
   */
  public static final int WID_MACHINE_GUN_VALUE = 6;
  /**
   * <pre>
   *mini枪
   * </pre>
   *
   * <code>WID_MINI_GUN = 7;</code>
   */
  public static final int WID_MINI_GUN_VALUE = 7;
  /**
   * <pre>
   *双枪
   * </pre>
   *
   * <code>WID_DOUBLE_PISTOL = 8;</code>
   */
  public static final int WID_DOUBLE_PISTOL_VALUE = 8;
  /**
   * <pre>
   *MeditNeedleGun针筒枪
   * </pre>
   *
   * <code>WID_MEDITNEEDLE_GUN = 9;</code>
   */
  public static final int WID_MEDITNEEDLE_GUN_VALUE = 9;
  /**
   * <code>WID_BOSSPVE = 10;</code>
   */
  public static final int WID_BOSSPVE_VALUE = 10;
  /**
   * <pre>
   *	WID_MED_GUN_ID			= 12;//医疗塔
   * </pre>
   *
   * <code>WID_JQT_GUN = 13;</code>
   */
  public static final int WID_JQT_GUN_VALUE = 13;
  /**
   * <pre>
   *信号枪
   * </pre>
   *
   * <code>WID_SIGNAL_GUN = 14;</code>
   */
  public static final int WID_SIGNAL_GUN_VALUE = 14;
  /**
   * <pre>
   *治疗枪
   * </pre>
   *
   * <code>WID_CURE_GUN = 15;</code>
   */
  public static final int WID_CURE_GUN_VALUE = 15;
  /**
   * <pre>
   *喷火枪
   * </pre>
   *
   * <code>WID_FLAME_GUN = 16;</code>
   */
  public static final int WID_FLAME_GUN_VALUE = 16;
  /**
   * <pre>
   *火箭筒
   * </pre>
   *
   * <code>WID_ROCKET_LUNCHER = 17;</code>
   */
  public static final int WID_ROCKET_LUNCHER_VALUE = 17;
  /**
   * <pre>
   *弓
   * </pre>
   *
   * <code>WID_BOW = 18;</code>
   */
  public static final int WID_BOW_VALUE = 18;
  /**
   * <pre>
   *刀
   * </pre>
   *
   * <code>WID_KNIFE = 19;</code>
   */
  public static final int WID_KNIFE_VALUE = 19;
  /**
   * <code>WID_THROW = 20;</code>
   */
  public static final int WID_THROW_VALUE = 20;
  /**
   * <pre>
   *闪光弹
   * </pre>
   *
   * <code>WID_FLASH = 21;</code>
   */
  public static final int WID_FLASH_VALUE = 21;
  /**
   * <pre>
   *烟雾弹
   * </pre>
   *
   * <code>WID_SMOKE = 22;</code>
   */
  public static final int WID_SMOKE_VALUE = 22;
  /**
   * <pre>
   *手雷
   * </pre>
   *
   * <code>WID_GRENADE = 23;</code>
   */
  public static final int WID_GRENADE_VALUE = 23;
  /**
   * <pre>
   *箭
   * </pre>
   *
   * <code>WID_AMMO_GRENADE = 42;</code>
   */
  public static final int WID_AMMO_GRENADE_VALUE = 42;
  /**
   * <pre>
   *箭
   * </pre>
   *
   * <code>WID_ARROW = 45;</code>
   */
  public static final int WID_ARROW_VALUE = 45;
  /**
   * <code>WID_WAR_DRUM = 47;</code>
   */
  public static final int WID_WAR_DRUM_VALUE = 47;
  /**
   * <code>WID_MILK = 48;</code>
   */
  public static final int WID_MILK_VALUE = 48;
  /**
   * <code>WID_GLASS = 49;</code>
   */
  public static final int WID_GLASS_VALUE = 49;
  /**
   * <pre>
   *僵尸主武器
   * </pre>
   *
   * <code>WID_BIOCHEMICAL = 51;</code>
   */
  public static final int WID_BIOCHEMICAL_VALUE = 51;
  /**
   * <pre>
   *僵尸副武器
   * </pre>
   *
   * <code>WID_BIOCHEMICAL_AVO = 52;</code>
   */
  public static final int WID_BIOCHEMICAL_AVO_VALUE = 52;
  /**
   * <pre>
   *默认资源争夺战 编辑模式带入武器
   * </pre>
   *
   * <code>WID_ZYZDZ_EDIT_DEFAULT = 54;</code>
   */
  public static final int WID_ZYZDZ_EDIT_DEFAULT_VALUE = 54;
  /**
   * <pre>
   *初级防御塔
   * </pre>
   *
   * <code>WID_TEAM_ELEMENTARY_TOWER = 100;</code>
   */
  public static final int WID_TEAM_ELEMENTARY_TOWER_VALUE = 100;
  /**
   * <pre>
   *中级防御塔
   * </pre>
   *
   * <code>WID_TEAM_MIDDLE_TOWER = 101;</code>
   */
  public static final int WID_TEAM_MIDDLE_TOWER_VALUE = 101;
  /**
   * <pre>
   *高级防御塔
   * </pre>
   *
   * <code>WID_TEAM_ADVANCED_TOWER = 102;</code>
   */
  public static final int WID_TEAM_ADVANCED_TOWER_VALUE = 102;
  /**
   * <code>WID_ZYZDZ_OIL_POT = 103;</code>
   */
  public static final int WID_ZYZDZ_OIL_POT_VALUE = 103;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static EItemWId valueOf(int value) {
    return forNumber(value);
  }

  public static EItemWId forNumber(int value) {
    switch (value) {
      case 0: return WID_NONE;
      case 1: return WID_PISTOL;
      case 2: return WID_SUBMACHINE;
      case 3: return WID_RIFFLE;
      case 4: return WID_SNIPER_GUN;
      case 5: return WID_SHOT_GUN;
      case 6: return WID_MACHINE_GUN;
      case 7: return WID_MINI_GUN;
      case 8: return WID_DOUBLE_PISTOL;
      case 9: return WID_MEDITNEEDLE_GUN;
      case 10: return WID_BOSSPVE;
      case 13: return WID_JQT_GUN;
      case 14: return WID_SIGNAL_GUN;
      case 15: return WID_CURE_GUN;
      case 16: return WID_FLAME_GUN;
      case 17: return WID_ROCKET_LUNCHER;
      case 18: return WID_BOW;
      case 19: return WID_KNIFE;
      case 20: return WID_THROW;
      case 21: return WID_FLASH;
      case 22: return WID_SMOKE;
      case 23: return WID_GRENADE;
      case 42: return WID_AMMO_GRENADE;
      case 45: return WID_ARROW;
      case 47: return WID_WAR_DRUM;
      case 48: return WID_MILK;
      case 49: return WID_GLASS;
      case 51: return WID_BIOCHEMICAL;
      case 52: return WID_BIOCHEMICAL_AVO;
      case 54: return WID_ZYZDZ_EDIT_DEFAULT;
      case 100: return WID_TEAM_ELEMENTARY_TOWER;
      case 101: return WID_TEAM_MIDDLE_TOWER;
      case 102: return WID_TEAM_ADVANCED_TOWER;
      case 103: return WID_ZYZDZ_OIL_POT;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<EItemWId>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      EItemWId> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<EItemWId>() {
          public EItemWId findValueByNumber(int number) {
            return EItemWId.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.pearl.fcw.proto.enums.ApiProto.getDescriptor()
        .getEnumTypes().get(9);
  }

  private static final EItemWId[] VALUES = values();

  public static EItemWId valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private EItemWId(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:fcw.proto.enums.type.EItemWId)
}

