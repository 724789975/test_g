<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"	
	xmlns:view="view.*"
	 height="100%" width="100%"
	creationComplete="init()" xmlns:vo="vo.*" fontSize="12" xmlns:component="component.*">
	<mx:Script>
		<![CDATA[
			import vo.Message;
			import mx.events.CloseEvent;
			import event.BoxClickEvent;
			import mx.events.ListEvent;
			import view.SysItemNameList2;
			import vo.SysItem;
			import mx.managers.PopUpManager;
			import view.SysItemNameList;
			import mx.controls.Alert;
			import utils.ColumnFactory;
			import utils.DatagridValidateFactory;
			import mx.utils.StringUtil;
			import mx.controls.TextInput;
			import mx.validators.Validator;
			import mx.events.DataGridEvent;
			import vo.Player;
			import mx.collections.ArrayCollection;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import popup.AddSysMessage;
			import mx.validators.NumberValidator;
			import mx.validators.StringValidator;
			import mx.validators.Validator;
			private var addSysMessage:AddSysMessage;
			import vo.GmUser;
			import utils.*;
			private var model:O2oModel = O2oModel.getInstance();
			[Bindable]
			public var playerList:ArrayCollection=new ArrayCollection();
			//[Bindable]
			//public var searchList:ArrayCollection=new ArrayCollection();
			[Bindable]
			public var player:Player=new Player();
			[Bindable]
			private var weapons:ArrayCollection;
			private var recivers : ArrayCollection;
			private function init():void{
				initBtn();
				playerDataGrid.columns=ColumnFactory.getPlayerColumns1(false);
				//getRo.getPlayerList();
			}
			private function initBtn():void{
		 		playerDataGrid.selectable=true;
		 		
			}
			private function onSearchBtnClick():void{
				this.player = new Player();
				//this.searchList= new ArrayCollection();
				if(StringUtil.trim(playerId.text)){
					var result:int = ValidateUtils.validateInt(StringUtil.trim(playerId.text));
					if(result == 2){
						Alert.show("Player Id应为整数");
						return;
					} else if(result == 0){
						getRo.getPlayerById(StringUtil.trim(playerId.text));
					}
					playerName.text="";
				} else if(StringUtil.trim(playerName.text) == "*"){
					//searchList = playerList;
					//getRo.getPlayerList();
					getRo.fuzzySelectByName(StringUtil.trim(""));
				}else{
					getRo.fuzzySelectByName(StringUtil.trim(playerName.text));
				}
				
			}
			private function getPlayerByIdHandler(evt:ResultEvent):void{
			 	this.playerList=evt.result as ArrayCollection;
			}
			private function fuzzySelectByNameHandler(evt:ResultEvent):void{
			 	this.playerList=evt.result as ArrayCollection;
			}
			private function getPlayerListHandler(evt:ResultEvent):void{
				playerList=evt.result as ArrayCollection;
			}
			private function updatePlayerListHandler(evt:ResultEvent):void{
				getRo.getPlayerList();
			}
			private function defaultFaultHandle(evt:FaultEvent):void{
				Alert.show(evt.fault.faultString);
			}
			import mx.controls.CheckBox;
			private function selectHandler(e:ListEvent):void{
		 			player=playerDataGrid.selectedItem as Player;
					var select:CheckBox=e.itemRenderer as CheckBox
					if(select){
						if(select.selected){
							player.selected=true;
						}else{
							player.selected=false;
						}
					}
		 	}
		 	private function checkIt(event:Event):void
			{
				playerDataGrid.invalidateList();
			}
			private var datagridValidate:Validator;
		 	private function maintainEdit(colIndex:int,rowIndex:int,source:Object):void
			{
				var editCell:Object = {columnIndex:colIndex, rowIndex: rowIndex};
				if(playerDataGrid.editedItemPosition==null)
				{
	   				playerDataGrid.editedItemPosition = editCell;
					callLater(validateCurrentEditor);
	   			}
			}
			private function validateCurrentEditor():void{
				datagridValidate.source=playerDataGrid.itemEditorInstance;
				datagridValidate.validate();
			}
			private function maintainFocus1(str:String):void
			{
				if(str=="exp"){
					getRo.getPlayerTitle(this.player.exp);
				}
				if(str=="rank"){
					getRo.getPlayerExp(this.player.rank);
				}	
			}
			private function maintainFocus():void
			{
	   			playerDataGrid.editedItemPosition = null;
			}
			private function getPlayerTitleHandler(evt:ResultEvent):void{
				var title:int=evt.result as int;
				this.player.rank=title;
				playerDataGrid.selectable=true;
				playerDataGrid.editedItemPosition = null;
			
			}
			private function getPlayerExpHandler(evt:ResultEvent):void{
				var exp:int=evt.result as int;
				this.player.exp=exp;
				playerDataGrid.selectable=true;
				playerDataGrid.editedItemPosition = null;
			
			}
			private function onMsgBtnClick():void{
				recivers = new ArrayCollection();
					for each(var p:Player in playerList){
						if(p.selected==true){
							recivers.addItem(p);
					}
				}
				if(recivers.length==0){
					Alert.show("请至少勾选一个玩家");
				}else{
					addSysMessage=AddSysMessage(PopUpManager.createPopUp(this,AddSysMessage,true));
					addSysMessage.message = new Message();
					addSysMessage.close.addEventListener(MouseEvent.CLICK,function():void{
						PopUpManager.removePopUp(addSysMessage);
					});
					addSysMessage.save.addEventListener(MouseEvent.CLICK,function():void{
						if(StringUtil.trim(addSysMessage.message.subject)&&StringUtil.trim(addSysMessage.message.content)){
								createRo.createSystemMessage(model.gmUser, recivers, addSysMessage.message);
							PopUpManager.removePopUp(addSysMessage);
						} else {
							Alert.show("主题跟内容都不能为空");
						}
					});
					PopUpManager.centerPopUp(addSysMessage);
				}
			}
			private function createSystemMessageHandler(evt:Event):void{
				Alert.show("发送成功");
			}
			private function onPresentBtnClick():void{
				recivers = new ArrayCollection();
					for each(var p:Player in playerList){
						if(p.selected==true){
							recivers.addItem(p);
					}
				}
				if(recivers.length==0){
					Alert.show("请至少勾选一个玩家");
				}else{
				getRo.getSysItemList(1);
				}
			}
			private function changList(e:BoxClickEvent):void{
				getRo.getSysItemList(e._data);
			}
			private var sysItemNameView:SysItemNameList2;
			private function getSysItemListHandler(evt:ResultEvent):void{
			 this.weapons=evt.result as ArrayCollection;
			 if(sysItemNameView==null){
				 sysItemNameView=SysItemNameList2(PopUpManager.createPopUp(this,SysItemNameList2,true));
				 sysItemNameView.save.label="赠送";
				 sysItemNameView.alertText = "是否赠送已选择物品，选YES赠送，选NO将清空";
				 PopUpManager.centerPopUp(sysItemNameView);
				 sysItemNameView.sysItemNameDatagrid.columns=ColumnFactory.getSysItemName2(false);
				
				 sysItemNameView.save.addEventListener(MouseEvent.CLICK,presentGift);
				 sysItemNameView.addEventListener(BoxClickEvent.BOX_CLICK,changList);
				 sysItemNameView.addEventListener(CloseEvent.CLOSE,function():void{
				 	PopUpManager.removePopUp(sysItemNameView);
				 	sysItemNameView=null;});
				 sysItemNameView.cancel.addEventListener(MouseEvent.CLICK,function():void{
				 	PopUpManager.removePopUp(sysItemNameView);
				 	sysItemNameView=null;});
			 }
			  sysItemNameView.sysItemList=this.weapons;
			}
			private function presentGift(e:MouseEvent):void{
				var list:ArrayCollection=sysItemNameView.sysItemList;
				var unit:int=parseInt(sysItemNameView.unit.text);
				var unitType:int=parseInt(sysItemNameView.unitType.text);
				var selectedList:ArrayCollection=new ArrayCollection();
				for each(var si:SysItem in list){
					if(si.selected){
						selectedList.addItem(si);
					}
				}
				if(selectedList.length!=0){
					createRo.presentToPlayers(model.gmUser,selectedList,recivers,unit,unitType);
					PopUpManager.removePopUp(sysItemNameView);
				 	sysItemNameView=null; 
				}
			}
			private function defaultHandler(event:ResultEvent):void{
			}
			private function onClearBtnClick():void{
				playerId.text="";
				playerName.text="";
			}
			private function onClearBtnClick1():void{
				lel.text="";
			}
			private var rankInt:int=-1;
			private function onFilterBtnClick():void{
				var numValidte:NumberValidator=new NumberValidator();
				numValidte.property="text";
				numValidte.domain = "int";
				if(StringUtil.trim(lel.text)==""){
					rankInt = -1;
					playerList.filterFunction=filter;
					playerList.refresh();
				}
				else if(numValidte.validate(StringUtil.trim(lel.text)).type=="invalid" && StringUtil.trim(lel.text)!=""){
					Alert.show("级别应该是整数");
				} else if(numValidte.validate(StringUtil.trim(lel.text)).type=="valid"){
					rankInt = parseInt(StringUtil.trim(lel.text));
					playerList.filterFunction=filter;
					playerList.refresh();
				}
			}
			private function filter(obj:Player):Boolean{
				if(rankInt==-1){
					return true;
				}
				else if(obj.rank==rankInt){
					return true;
				} else {
					return false;
				}
			}
			private function selectedAll():void{
				recivers = new ArrayCollection();
				if(selectAll.selected){
					for each(var p:Player in playerList){
						p.selected=true;
						recivers.addItem(p);
					}
					//this.sysItemNameDatagrid.dataProvider=sysItemList;
				}else{
					for each(var p1:Player in playerList){
						p1.selected=false;
					}
					//this.sysItemNameDatagrid.dataProvider=sysItemList;
				}
			}
			private function onRefreshBtnClick():void{
				initBtn();
				getRo.getPlayerList();
				onSearchBtnClick();
			}
		]]>
	</mx:Script>
	<mx:RemoteObject id="getRo" destination="ro.get" showBusyCursor="true">
		<mx:method name="fuzzySelectByName" result="fuzzySelectByNameHandler(event)" fault="defaultFaultHandle(event)"/>
		<mx:method name="getPlayerById" result="getPlayerByIdHandler(event)" fault="defaultFaultHandle(event)"/>
		<mx:method name="getPlayerList" result="getPlayerListHandler(event)" fault="defaultFaultHandle(event)"/>
		<mx:method name="getPlayerTitle" result="getPlayerTitleHandler(event)" fault="defaultFaultHandle(event)"/>
		<mx:method name="getPlayerExp" result="getPlayerExpHandler(event)" fault="defaultFaultHandle(event)"/>
		<mx:method name="getSysItemList" result="getSysItemListHandler(event)"/>
	</mx:RemoteObject>
	<mx:RemoteObject id="createRo" destination="ro.create" showBusyCursor="true">
		<mx:method name="presentToPlayers" result="defaultHandler(event)" />
		<mx:method name="createSystemMessage" result="createSystemMessageHandler(event)" />
	</mx:RemoteObject>
	<mx:HBox  height="100%" width="100%">
	
	<mx:VBox  height="100%" width="100%">
		<mx:HBox>
			<mx:ApplicationControlBar width="100%" >	
				<mx:Label text="Player ID"/>
				<mx:TextInput id="playerId" />
				<mx:Label text="{resourceManager.getString('Language','label.CharacterName')}"/>
				<mx:TextInput id="playerName" />
				<mx:Button id="searchBtn"  label="{resourceManager.getString('Language','button.Search')}"  click="onSearchBtnClick()"/>
				<mx:Button id="clearBtn"  label="{resourceManager.getString('Language','button.Reset')}"  click="onClearBtnClick()"/>
				<mx:Button id="refreshBtn"  label="{resourceManager.getString('Language','button.Refresh')}"  click="onRefreshBtnClick()"/>
			</mx:ApplicationControlBar>
		</mx:HBox>
		<mx:HBox>
			<mx:ApplicationControlBar width="100%" >		
				<mx:Label text="{resourceManager.getString('Language','label.GradeFilter')}"/>
				<mx:TextInput id="lel"/>
				<mx:Button id="filterBtn"  label="{resourceManager.getString('Language','button.Filter')}"  click="onFilterBtnClick()"/>
				<mx:Button id="clearBtn1"  label="{resourceManager.getString('Language','button.Reset')}"  click="onClearBtnClick1()"/>
	     	</mx:ApplicationControlBar>
		</mx:HBox>
		<mx:HBox>
			<mx:ApplicationControlBar width="100%" >		
				<mx:Label text="{resourceManager.getString('Language','label.Operate')}" />		
	        	<mx:Button id="presentBtn"  label="{resourceManager.getString('Language','button.Give')}"  click="onPresentBtnClick()"/>
	        	<mx:Button id="msgBtn"  label="{resourceManager.getString('Language','button.Send')}"  click="onMsgBtnClick()"/>
	     	</mx:ApplicationControlBar>
		</mx:HBox>
		<mx:ControlBar width="100%" paddingBottom="0" paddingRight="0" paddingTop="0">	
		<mx:CheckBox id="selectAll" label="{resourceManager.getString('Language','label.SelectAll')}" change="selectedAll()">
		</mx:CheckBox>
		</mx:ControlBar>
		<mx:ApplicationControlBar  height="100%" width="100%">	
			<mx:DividedBox width="100%" height="100%">
			<component:MyDataGrid id="playerDataGrid" dataProvider="{playerList}" itemClick="selectHandler(event)" lockedColumnCount="3" 
				width="100%" height="100%" editable="false" change="checkIt(event)">
			</component:MyDataGrid>
			</mx:DividedBox>
		</mx:ApplicationControlBar>
	 </mx:VBox>
   </mx:HBox>
</mx:VBox>
