// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from Proto

package com.pearl.fcw.info.core.network.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;

import javax.annotation.Generated;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;


@Generated("java_bean")
public final class UserLoginResponse implements Externalizable, Message<UserLoginResponse>, Schema<UserLoginResponse>
{

    public static Schema<UserLoginResponse> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static UserLoginResponse getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final UserLoginResponse DEFAULT_INSTANCE = new UserLoginResponse();


    private long id;
    private String userName;
    private String sdkUid;
    private String sdkToken;
    private Boolean isActivate;

    public UserLoginResponse()
    {

    }

    // getters and setters

    // id

    public long getId()
    {
        return id;
    }


    public void setId(long id)
    {
        this.id = id;
    }

    // userName

    public String getUserName()
    {
        return userName;
    }


    public void setUserName(String userName)
    {
        this.userName = userName;
    }


    // sdkUid

    public String getSdkUid()
    {
        return sdkUid;
    }


    public void setSdkUid(String sdkUid)
    {
        this.sdkUid = sdkUid;
    }

    // sdkToken

    public String getSdkToken()
    {
        return sdkToken;
    }


    public void setSdkToken(String sdkToken)
    {
        this.sdkToken = sdkToken;
    }

    // isActivate

    public Boolean getIsActivate()
    {
        return isActivate;
    }


    public void setIsActivate(Boolean isActivate)
    {
        this.isActivate = isActivate;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final UserLoginResponse that = (UserLoginResponse) obj;
        return
                Objects.equals(this.id, that.id) &&
                Objects.equals(this.userName, that.userName) &&
                Objects.equals(this.sdkUid, that.sdkUid) &&
                Objects.equals(this.sdkToken, that.sdkToken) &&
                Objects.equals(this.isActivate, that.isActivate);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, userName, sdkUid, sdkToken, isActivate);
    }

    @Override
    public String toString() {
        return "UserLoginResponse{" +
                    "id=" + id +
                    ", userName=" + userName +
                    ", sdkUid=" + sdkUid +
                    ", sdkToken=" + sdkToken +
                    ", isActivate=" + isActivate +
                '}';
    }
    // java serialization

    @Override
    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    @Override
    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    @Override
    public Schema<UserLoginResponse> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    @Override
    public UserLoginResponse newMessage()
    {
        return new UserLoginResponse();
    }

    @Override
    public Class<UserLoginResponse> typeClass()
    {
        return UserLoginResponse.class;
    }

    @Override
    public String messageName()
    {
        return UserLoginResponse.class.getSimpleName();
    }

    @Override
    public String messageFullName()
    {
        return UserLoginResponse.class.getName();
    }

    @Override
    public boolean isInitialized(UserLoginResponse message)
    {
        return true;
    }

    @Override
    public void mergeFrom(Input input, UserLoginResponse message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.id = input.readSInt64();
                    break;
                case 2:
                    message.userName = input.readString();
                    break;
                case 4:
                    message.sdkUid = input.readString();
                    break;
                case 5:
                    message.sdkToken = input.readString();
                    break;
                case 6:
                    message.isActivate = input.readBool();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    @Override
    public void writeTo(Output output, UserLoginResponse message) throws IOException
    {
        if(message.id != 0)
            output.writeSInt64(1, message.id, false);

        if(message.userName != null)
            output.writeString(2, message.userName, false);

        if(message.sdkUid != null)
            output.writeString(4, message.sdkUid, false);

        if(message.sdkToken != null)
            output.writeString(5, message.sdkToken, false);

        if(message.isActivate != null)
            output.writeBool(6, message.isActivate, false);
    }

    @Override
    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    @Override
    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }


}
