// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from Proto

package com.pearl.fcw.info.core.network.proto;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.Objects;

import javax.annotation.Generated;

import io.protostuff.GraphIOUtil;
import io.protostuff.Input;
import io.protostuff.Message;
import io.protostuff.Output;
import io.protostuff.Schema;
import io.protostuff.UninitializedMessageException;
@Generated("java_bean")
public final class UserLoginRequest implements Externalizable, Message<UserLoginRequest>, Schema<UserLoginRequest>
{

    public static Schema<UserLoginRequest> getSchema()
    {
        return DEFAULT_INSTANCE;
    }

    public static UserLoginRequest getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final UserLoginRequest DEFAULT_INSTANCE = new UserLoginRequest();


    private String userName;
    private String userPwd;
    private String sdkUid;
    private String sdkToken;
    private String ip;

    public UserLoginRequest()
    {

    }

    public UserLoginRequest(
        String userName
    )
    {
        this.userName = userName;
    }

    // getters and setters

    // userName

    public String getUserName()
    {
        return userName;
    }


    public void setUserName(String userName)
    {
        this.userName = userName;
    }

    // userPwd

    public String getUserPwd()
    {
        return userPwd;
    }


    public void setUserPwd(String userPwd)
    {
        this.userPwd = userPwd;
    }

    // sdkUid

    public String getSdkUid()
    {
        return sdkUid;
    }


    public void setSdkUid(String sdkUid)
    {
        this.sdkUid = sdkUid;
    }

    // sdkToken

    public String getSdkToken()
    {
        return sdkToken;
    }


    public void setSdkToken(String sdkToken)
    {
        this.sdkToken = sdkToken;
    }

    // ip

    public String getIp()
    {
        return ip;
    }


    public void setIp(String ip)
    {
        this.ip = ip;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null || this.getClass() != obj.getClass()) {
            return false;
        }
        final UserLoginRequest that = (UserLoginRequest) obj;
        return
                Objects.equals(this.userName, that.userName) &&
                Objects.equals(this.userPwd, that.userPwd) &&
                Objects.equals(this.sdkUid, that.sdkUid) &&
                Objects.equals(this.sdkToken, that.sdkToken) &&
                Objects.equals(this.ip, that.ip);
    }

    @Override
    public int hashCode() {
        return Objects.hash(userName, userPwd, sdkUid, sdkToken, ip);
    }

    @Override
    public String toString() {
        return "UserLoginRequest{" +
                    "userName=" + userName +
                    ", userPwd=" + userPwd +
                    ", sdkUid=" + sdkUid +
                    ", sdkToken=" + sdkToken +
                    ", ip=" + ip +
                '}';
    }
    // java serialization

    @Override
    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, this);
    }

    @Override
    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, this);
    }

    // message method

    @Override
    public Schema<UserLoginRequest> cachedSchema()
    {
        return DEFAULT_INSTANCE;
    }

    // schema methods

    @Override
    public UserLoginRequest newMessage()
    {
        return new UserLoginRequest();
    }

    @Override
    public Class<UserLoginRequest> typeClass()
    {
        return UserLoginRequest.class;
    }

    @Override
    public String messageName()
    {
        return UserLoginRequest.class.getSimpleName();
    }

    @Override
    public String messageFullName()
    {
        return UserLoginRequest.class.getName();
    }

    @Override
    public boolean isInitialized(UserLoginRequest message)
    {
        return
            message.userName != null;
    }

    @Override
    public void mergeFrom(Input input, UserLoginRequest message) throws IOException
    {
        for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
        {
            switch(number)
            {
                case 0:
                    return;
                case 1:
                    message.userName = input.readString();
                    break;
                case 2:
                    message.userPwd = input.readString();
                    break;
                case 3:
                    message.sdkUid = input.readString();
                    break;
                case 4:
                    message.sdkToken = input.readString();
                    break;
                case 5:
                    message.ip = input.readString();
                    break;
                default:
                    input.handleUnknownField(number, this);
            }
        }
    }


    @Override
    public void writeTo(Output output, UserLoginRequest message) throws IOException
    {
        if(message.userName == null)
            throw new UninitializedMessageException(message);
        output.writeString(1, message.userName, false);

        if(message.userPwd != null)
            output.writeString(2, message.userPwd, false);

        if(message.sdkUid != null)
            output.writeString(3, message.sdkUid, false);

        if(message.sdkToken != null)
            output.writeString(4, message.sdkToken, false);

        if(message.ip != null)
            output.writeString(5, message.ip, false);
    }

    @Override
    public String getFieldName(int number)
    {
        return Integer.toString(number);
    }

    @Override
    public int getFieldNumber(String name)
    {
        return Integer.parseInt(name);
    }


}
