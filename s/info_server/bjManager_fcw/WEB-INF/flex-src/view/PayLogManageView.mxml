<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"	
	xmlns:view="view.*" creationComplete="init()"
	 height="100%" width="100%"
	 xmlns:vo="vo.*" fontSize="12" xmlns:component="component.*" horizontalAlign="center">
<mx:Script>
	<![CDATA[
		import vo.Player;
		import mx.events.CloseEvent;
		import mx.managers.PopUpManager;
		import popup.AddSysNotice;
		import popup.UpdateSysNotice;
		import mx.controls.TextInput;
		import vo.PayLog;
		import mx.collections.ArrayCollection;
		import mx.controls.Alert;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.events.ResultEvent;
		import mx.utils.StringUtil;
		import mx.validators.NumberValidator;
		import mx.validators.StringValidator;
		import mx.validators.Validator;
		import utils.*;
		import vo.GmUser;
		private var gmUser:GmUser = O2oModel.getInstance().gmUser;
		[Bindable]
		private var payLogList:ArrayCollection=new ArrayCollection();
		[Bindable]
		private var currentPayLog:PayLog = null;
		[Bindable]
		private var selectedPayType:int = -1;
		[Bindable]
		private var selectedUseType:int = -1;
		[Bindable]
		public var playerList:ArrayCollection=new ArrayCollection();
		//[Bindable]
		//public var searchList:ArrayCollection=new ArrayCollection();
		private var player:Player = new Player();
		private function init():void{
			playerDataGrid.columns=ColumnFactory.getPlayerColumns(false);
			//getRo.getPlayerList();
		}
		private function selectHandler():void{
			this.player=playerDataGrid.selectedItem as Player;
			payLogView.playerId = player.id;
		 	payLogView.init();
		 	payLogView.fatherView = this;
		}
		
		private function getPayLogListHandler(evt:ResultEvent):void{
			payLogList = evt.result as ArrayCollection;
			payLogList.filterFunction=typeFilter;
			payLogList.refresh();
		}
		
		private function defaultFaultHandler(evt:FaultEvent):void{
			Alert.show(evt.message.toString());
		}
		private function queryBtnClick():void{
			if(StringUtil.trim(playerId.text)){
				var numValidte:NumberValidator=new NumberValidator();
				numValidte.property="text";
				numValidte.domain = "int";
				if(numValidte.validate(StringUtil.trim(playerId.text)).type=="invalid"){
					Alert.show("PlayerId格式不正确");
				} else if(numValidte.validate(StringUtil.trim(playerId.text)).type=="valid"){
					getRo.getpayloListByPlayerId(StringUtil.trim(playerId.text));
				}
				
			} else {
				Alert.show("PlayerId不能为空");
			}
		}
		private function clearBtnClick():void{
			playerId.text = "";
		}
		private function typeFilter(item:Object):Boolean{
				var log:PayLog = item as PayLog;
				if(this.selectedPayType == -1 && this.selectedUseType==-1 )
					return true;
				if((log.payType==this.selectedPayType||this.selectedPayType==-1) && (log.itemType==this.selectedUseType||this.selectedUseType==-1))			
					return true;
				else 
					return false;
			}
		private function doPayTypeFilter(evt:Event):void{
			this.selectedPayType  = evt.target.selectedItem.data;
        	payLogList.filterFunction=typeFilter;
        	payLogList.refresh();
		}
		private function doUseTypeFilter(evt:Event):void{
			this.selectedUseType  = evt.target.selectedItem.data;
        	payLogList.filterFunction=typeFilter;
        	payLogList.refresh();
		}
		[Bindable]
		public var payTypes:ArrayCollection = new ArrayCollection(
                [ {label:"------所有------", data:-1}, 
                  {label:"游戏币", data:0}, 
                  {label:"人民币", data:1},
                  {label:"抵用券", data:2},
                   {label:"勋章", data:3}  
                ]);
        [Bindable]
        public var useTypes:ArrayCollection = new ArrayCollection(
                [ {label:"------所有------", data:-1}, 
                  {label:"永久", data:0}, 
                  {label:"基于个数", data:1},
                  {label:"基于时间", data:2} 
                ]);
        private function onShowPayLogView(e:Event):void{
				var btn:Button = e.currentTarget as Button;
				if(payLogView.visible){
					payLogView.visible = false;
					payLogView.height  = 0;
					btn.label 		= "查看消费信息";
				}else{
					payLogView.visible = true;
					payLogView.height = 300;
					btn.label 		= "隐藏消费信息";
				}
			}
		private function onSearchBtnClick():void{
			this.player = new Player();
			//this.searchList= new ArrayCollection();
			if(StringUtil.trim(playerId.text)){
				var result:int = ValidateUtils.validateInt(StringUtil.trim(playerId.text));
				if(result == 2){
					Alert.show("Player Id应为整数");
					return;
				} else if(result == 0){
					getRo.getPlayerById(StringUtil.trim(playerId.text));
				}
				playerName.text="";
			} else if(StringUtil.trim(playerName.text) == "*"){
				//searchList = playerList;
				//getRo.getPlayerList();
				getRo.fuzzySelectByName(StringUtil.trim(""));
			}else{
				getRo.fuzzySelectByName(StringUtil.trim(playerName.text));
			}
		}
		private function getPlayerListHandler(evt:ResultEvent):void{
				playerList=evt.result as ArrayCollection;
		}
		private function defaultFaultHandle(evt:FaultEvent):void{
				//Alert.show(evt.message.toString());
				Alert.show("操作失败");
		}
		private function onRefreshBtnClick():void{
				getRo.getPlayerList();
				//用户已经进行搜索，刷新后也过滤出搜索后的信息
				if(playerList.length>0){
					onSearchBtnClick();
				}
				payLogView.playerId = 0;
				payLogView.payLogList = new ArrayCollection();
				payLogView.init();
				payLogView.fatherView = this;
		}
		private function getPlayerByIdHandler(evt:ResultEvent):void{
		 	this.playerList=evt.result as ArrayCollection;
		 	playerListPanel.title = "玩家列表(共" + playerList.length + "项)";
		}
		private function fuzzySelectByNameHandler(evt:ResultEvent):void{
		 	this.playerList=evt.result as ArrayCollection;
		 	playerListPanel.title = "玩家列表(共" + playerList.length + "项)";
		}
	]]>
</mx:Script>
	<mx:RemoteObject id="getRo" destination="ro.get">
		<mx:method name="fuzzySelectByName" result="fuzzySelectByNameHandler(event)" fault="defaultFaultHandle(event)"/>
		<mx:method name="getPlayerById" result="getPlayerByIdHandler(event)" fault="defaultFaultHandle(event)"/>
		<mx:method name="getPlayerList" result="getPlayerListHandler(event)" fault="defaultFaultHandle(event)"/>
	</mx:RemoteObject>
	<mx:HBox  height="100%" width="100%">
	<mx:VBox  height="100%" width="100%">
		<mx:HBox>
			<mx:ApplicationControlBar>	
				<mx:Button id="showPayLogView" click="onShowPayLogView(event)" label="隐藏消费信息"/>
				<mx:HBox>
					<mx:Label text="Player ID"/>
					<mx:TextInput id="playerId" />
					<mx:Label text="角色名"/>
					<mx:TextInput id="playerName" />
				</mx:HBox>
				<mx:Button id="searchBtn"  label="检索"  click="onSearchBtnClick()"/>
				<mx:Button id="refreshBtn"  label="刷新"  click="onRefreshBtnClick()"/>
			</mx:ApplicationControlBar>
		</mx:HBox>
		<mx:Panel title="玩家列表(共0项)" width="100%" height="100%" id="playerListPanel">
			<component:MyDataGrid id="playerDataGrid" dataProvider="{playerList}" itemClick="selectHandler()" lockedColumnCount="3" 
			width="100%" height="100%" editable="false">
			</component:MyDataGrid>
		</mx:Panel>
		<mx:Panel title="消费列表(共0项)" width="100%" id="payLogListPanel">
			<view:PayLogView id="payLogView" width="100%" height="300" visible="true"/>
		</mx:Panel>
	</mx:VBox>
	</mx:HBox>
</mx:VBox>
